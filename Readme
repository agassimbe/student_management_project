2.1 Créer un projet Django: student_management_project

django-admin startproject student_management_project
2.2 Créer un projet Django: student_management_application au sein du
projet student_management_project

python manage.py startapp student_management_application

2.3 Définissez les modèles de données dans votre application
student_management_application

from django.db import models

class Student(models.Model):
    name = models.CharField(max_length=100)
    age = models.IntegerField()
    sex = models.CharField(max_length=10)
    email = models.EmailField(unique=True)

    def __str__(self):
        return self.name

class Teacher(models.Model):
    name = models.CharField(max_length=100)
    subject = models.CharField(max_length=100)

    def __str__(self):
        return self.name

class Course(models.Model):
    name = models.CharField(max_length=100)
    teacher = models.ForeignKey(Teacher, on_delete=models.CASCADE)
    students = models.ManyToManyField(Student, related_name='courses')

    def __str__(self):
        return self.name

class Score(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    course = models.ForeignKey(Course, on_delete=models.CASCADE)
    score = models.FloatField()

    def __str__(self):
        return f'{self.student.name} - {self.course.name} : {self.score}'



2.4 Configurez la base de données dans les paramètres de votre projet :
student_management_project


"default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }

2.5 Configurez la nouvelle l'application student_management_application dans votre projet

"student_management_application",

2.6 Effectuer les migrations

python manage.py makemigrations
pip install mysqlclient
python manage.py migrate

2.7 Insérer dans votre base de données quelques lignes de jeux de données


-- Exemple de données pour la table Student
INSERT INTO student_management_application_student (name, age, sex) VALUES
('John Doe', 20, 'm'),
('Jane Smith', 22, 'f'),
('Bob Johnson', 21, 'm');
-- Exemple de données pour la table Teacher
INSERT INTO student_management_application_teacher (name, subject) VALUES
('Professor Brown', 'Mathematics'),
('Dr. Johnson', 'Physics'),
('Mrs. Davis', 'English');
-- Exemple de données pour la table Course
INSERT INTO student_management_application_course (name, teacher_id) VALUES
('Math 101', 1),
('Physics 201', 2),
('English Literature', 3);
-- Exemple de données pour la table Score
INSERT INTO student_management_application_score (student_id, course_id, score)
VALUES
(1, 1, 85),
(1, 2, 92),
(2, 2, 88),
(3, 3, 95);

3 Vues - Templates - URLs

3.1 Réaliser avec le fichier views.py de l'application
student_management_application :

#student_management_application/views.py
from .models import Student

from .models import Student, Teacher, Course, Score

# Create your views here.
from .models import Student


# Vue pour lister les étudiants
def student_list(request):
    students = Student.objects.all()
    return render(request, 'core/student_list.html', {'students': students})

# Vue pour lister les cours
def course_list(request):
    courses = Course.objects.all()
    return render(request, 'core/course_list.html', {'courses': courses})

# Vue pour lister les enseignants
def teacher_list(request):
    teachers = Teacher.objects.all()
    return render(request, 'core/teacher_list.html', {'teachers': teachers})

# Vue pour lister les scores
def score_list(request):
    scores = Score.objects.all()
    return render(request, 'core/score_list.html', {'scores': scores})


3.2 Réaliser avec trois fichiers templates student_list.html , course_list.html ,
teacher_list.html et score_list.html de l'application
student_management_application pour représenter les données récupérées

<!-- templates/student_list.html -->
<!DOCTYPE html>
<html>
<head>
    <title>Liste des Étudiants</title>
</head>
<body>
    <h1>Liste des Étudiants</h1>
    <ul>
        {% for student in students %}
            <li>{{ student.name }} - {{ student.age }} ans - {{ student.sex }} - {{ student.email }}</li>
        {% endfor %}
    </ul>
</body>
</html>

<!-- templates/course_list.html -->

<!DOCTYPE html>
<html>
<head>
    <title>Liste des Cours</title>
</head>
<body>
    <h1>Liste des Cours</h1>
    <ul>
        {% for course in courses %}
            <li>{{ course.name }} - Enseignant : {{ course.teacher.name }}</li>
        {% endfor %}
    </ul>
</body>
</html>

<!-- templates/teacher_list.html -->

<!DOCTYPE html>
<html>
<head>
    <title>Liste des Enseignants</title>
</head>
<body>
    <h1>Liste des Enseignants</h1>
    <ul>
        {% for teacher in teachers %}
            <li>{{ teacher.name }} - Matière : {{ teacher.subject }}</li>
        {% endfor %}
    </ul>
</body>
</html>

<!-- templates/score_list.html -->

<!DOCTYPE html>
<html>
<head>
    <title>Liste des Scores</title>
</head>
<body>
    <h1>Liste des Scores</h1>
    <ul>
        {% for score in scores %}
            <li>{{ score.student.name }} - {{ score.course.name }} : {{ score.score }}</li>
        {% endfor %}
    </ul>
</body>
</html>



